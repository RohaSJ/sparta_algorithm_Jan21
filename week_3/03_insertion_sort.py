# 선택 정렬이 전체에서 최솟값을 "선택" 하는 거 였다면,
# 삽입 정렬은 전체에서 하나씩 올바른 위치에 "삽입" 하는 방식
# 선택 정렬은 현재 데이터의 상태와 상관없이 항상 비교하고 위치를 바꾸지만,
# 삽입 정렬은 필요할 때만 위치를 변경하므로 더 효율적인 방식

# 1단계 : [4, 6, 2, 9, 1] 4는 현재 정렬되어 있는 부대원, 새로운 신병인 6을 받습니다.
# 4, 6 이 되는데 4 < 6 이므로 그대로 둠. 삽입 정렬은 한 바퀴가 돌 때마다 정렬된 상태가 됩니다.

# 2단계 : [4, 6, 2, 9, 1] 4, 6 은 현재 정렬되어 있는 부대원, 새로운 신병인 2를 받습니다.
#         4, 6, 2 가 되는데 6 > 2 이므로 둘을 변경
#         4, 2, 6 가 되는데 4 > 2 이므로 둘을 변경
#        [2, 4, 6, 9, 1] 이 됨.

# 1번째 : [4, 6, 2, 9, 1]
#           ←  비교!
# 2번째 : [4, 6, 2, 9, 1]
#           ← ← 비교! : 인덱스 2를 비교하고 인덱스 1을 비교함
# 3번째 : [2, 4, 6, 9, 1]
#           ← ← ← 비교! : 인덱스 3을 비교하고 인덱스 2를 비교하고 인덱스 1을 비교함
# 4번째 : [2, 4, 6, 9, 1]
#           ← ← ← ←  비교! : 인덱스 4,3,2,1 를 순서대로 비교함

# for i in range(1, n): 에서 0이 아닌 1인 이유는 -> 4는 이미 정렬이 되어있다고 여기고 6부터 시작 하기 때문.
# else : break -> 예를들어 3번째의 9의 경우는 바꿀 필요가 없

# Q. 다음과 같이 숫자로 이루어진 배열이 있을 때, 오름차순으로 삽입 정렬을 이용해서 정렬하시오.

input = [4, 6, 2, 9, 1]

def insertion_sort(array):
    n = len(array)
    for i in range(1, n):
        for j in range(i):
            if array[i - j - 1] > array[i - j]:
                array[i - j - 1], array[i - j] = array[i - j], array[i - j - 1]
            else:
                break


insertion_sort(input)
print(input)

# 이것도 바로 O(N^2) 만큼 걸림 그러나, 버블 정렬과 선택 정렬과 다른 면이 있음.
# 버블 정렬과 선택 정렬은 최선이든 최악이든 항상 O(N^2) 만큼의 시간이 걸렸지만,
# 삽입 정렬은 최선의 경우에는 Ω(N) 만큼의 시간 복잡도가 걸림.
# 거의 정렬이 된 배열이 들어간다면 break 문에 의해서 더 많은 원소와 비교하지 않고 탈출할 수 있기 때문.